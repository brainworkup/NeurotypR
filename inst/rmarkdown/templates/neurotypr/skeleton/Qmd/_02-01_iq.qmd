## General Cognitive Ability {#sec-iq}

{{< include _02-01_iq_text.qmd >}}

```{r}
#| label: setup-iq
#| include: false

# Filter by domain
domains <- c("General Cognitive Ability")

# Target phenotype
pheno <- "iq"

# Read the CSV file into a data frame
iq <- readr::read_csv("neurocog.csv")
```

```{r}
#| label: export-iq
#| include: false
#| eval: true

iq <- iq |>
  dplyr::filter(domain %in% domains)

# Select specific columns from the data frame
iq <- iq |>
  dplyr::select(
    test,
    test_name,
    scale,
    raw_score,
    score,
    ci_95,
    percentile,
    range,
    domain,
    subdomain,
    narrow,
    pass,
    verbal,
    timed,
    description,
    result,
    z,
    z_mean_domain,
    z_sd_domain,
    z_mean_subdomain,
    z_sd_subdomain,
    z_mean_narrow,
    z_sd_narrow,
    z_mean_pass,
    z_sd_pass,
    z_mean_verbal,
    z_sd_verbal,
    z_mean_timed,
    z_sd_timed
  )

# Write the resulting data frame to a new CSV file
# The file name is created by concatenating the 'pheno' variable and ".csv"
# NA values are replaced with an empty string in the output file
# Column names are included in the output file
# If the file already exists, it is overwritten (not appended)
readr::write_excel_csv(
  iq,
  paste0(pheno, ".csv"),
  na = "",
  col_names = TRUE,
  append = FALSE
)
```

```{r}
#| label: data-iq
#| include: false
#| eval: true

# Read the data using the read_data function from the bwu library
# The phenotype is specified by the 'pheno' variable
data <- iq

# Define the scales to include
subset <- c(
  "Auditory Working Memory (AWMI)",
  "Cognitive Proficiency (CPI)",
  "Crystallized Knowledge",
  "Fluid Reasoning (FRI)",
  "Fluid Reasoning",
  "Full Scale (FSIQ)",
  "Full Scale IQ (FSIQ)",
  "General Ability (GAI)",
  "General Ability",
  "General Intelligence",
  "Global Neurocognitive Index (G)",
  "NAB Attention Index",
  "NAB Executive Functions Index",
  "NAB Language Index",
  "NAB Memory Index",
  "NAB Spatial Index",
  "NAB Total Index",
  "Nonverbal (NVI)",
  "Perceptual Reasoning (PRI)",
  "Perceptual Reasoning",
  "Processing Speed (PSI)",
  "Processing Speed",
  "RBANS Total Index",
  "Test of Premorbid Functioning",
  "TOPF Standard Score",
  "Total NAB Index (T-NAB)",
  "Verbal Comprehension (VCI)",
  "Verbal Comprehension",
  "Visual Perception/Construction",
  "Visual Spatial (VSI)",
  "Vocabulary Acquisition (VAI)",
  "Word Reading",
  "Working Memory (WMI)",
  "Working Memory",
  "Attention Index (ATT)",
  "Language Index (LAN)",
  "Spatial Index (SPT)",
  "Memory Index (MEM)",
  "Executive Functions Index (EXE)"
)

# Filter the data using the filter_data function from the bwu library
# The domain is specified by the 'domains' variable
# The scale is specified by the 'scales' variable
data_iq <- bwu::filter_data(data, domain = domains, scale = scales)
```

```{r}
#| label: text-iq
#| cache: true
#| include: false

# export text
bwu::cat_neuropsych_results(data = data_iq, file = "_02-01_iq_text.qmd")
```

```{r}
#| include: false

#' @title Make Table Using gt Package for Neurocognitive Domains
#' @description Create a table of domain counts using dplyr and gt packages.
#' @importFrom dplyr across mutate group_by summarize arrange select if_else
#' @importFrom gt gt cols_label tab_stub_indent tab_header sub_missing tab_options cols_align tab_source_note gtsave tab_style tab_stubhead tab_caption tab_spanner cell_text cells_body cells_row_groups md tab_footnote opt_vertical_padding
#' @importFrom gtExtras gt_theme_538
#' @importFrom tidyr replace_na
#' @importFrom glue glue
#' @param data File or path to data.
#' @param pheno Phenotype name.
#' @param table_name Name of the table to be saved.
#' @param source_note Source note to be added to the table.
#' @param names Names of the columns.
#' @param title Title of the table.
#' @param tab_stubhead Stubhead of the table.
#' @param caption Caption of the table.
#' @param process_md Process markdown.
#' @param fn_scaled_score Footnote for scaled score.
#' @param fn_standard_score Footnote for standard score.
#' @param fn_t_score Footnote for t score.
#' @param fn_z_score Footnote for z score.
#' @param fn_raw_score Footnote for raw scores.
#' @param grp_standard_score Groups for standard score.
#' @param grp_t_score Groups for t score.
#' @param grp_scaled_score Groups for scaled score.
#' @param grp_z_score Groups for z score.
#' @param grp_raw_score Groups for raw scores.
#' @param dynamic_grp Generalized grouping parameter.
#' @param vertical_padding Vertical padding.
#' @param multiline Multiline footnotes, Default = TRUE.
#' @param ... Additional arguments to be passed to the function.
#' @return A formatted table with domain counts.
#' @rdname tbl_gt
#' @export
tbl_gt <-
  function(
      data,
      pheno = NULL,
      table_name = NULL,
      source_note = NULL,
      names = NULL,
      title = NULL,
      tab_stubhead = NULL,
      caption = NULL,
      process_md = FALSE,
      fn_scaled_score = NULL,
      fn_standard_score = NULL,
      fn_t_score = NULL,
      fn_z_score = NULL,
      fn_raw_score = NULL,
      grp_scaled_score = NULL,
      grp_standard_score = NULL,
      grp_t_score = NULL,
      grp_z_score = NULL,
      grp_raw_score = NULL,
      dynamic_grp = NULL,
      vertical_padding = NULL,
      multiline = TRUE,
      ...) {
    # Create data counts
    data_counts <- data |>
      dplyr::select(test_name, scale, score, percentile, range) |>
      dplyr::mutate(across(
        c(score, percentile),
        ~ tidyr::replace_na(., replace = 0)
      ))

    # Create table
    table <- data_counts |>
      dplyr::mutate(
        score = dplyr::if_else(score == 0, NA_integer_, score),
        percentile = dplyr::if_else(percentile == 0, NA_integer_, percentile),
        test_name = as.character(paste0(test_name)),
        scale = as.character(scale)
      ) |>
      gt::gt(
        rowname_col = "scale",
        groupname_col = "test_name",
        process_md = process_md,
        caption = caption,
        rownames_to_stub = FALSE,
        id = paste0("table_", pheno)
      ) |>
      gt::cols_label(
        test_name = gt::md("**Test**"),
        scale = gt::md("**Scale**"),
        score = gt::md("**Score**"),
        percentile = gt::md("**% Rank**"),
        range = gt::md("**Range**")
      ) |>
      gt::tab_header(title = title) |>
      gt::tab_stubhead(label = tab_stubhead) |>
      gt::sub_missing(missing_text = "--") |>
      # Indent rows except the main index row
      gt::tab_stub_indent(
        rows = !scale %in%
          c("Attention Index (ATT)", "Executive Functions Index (EXE)"),
        indent = 2
      ) |>
      # Bold the index rows in the stub column
      gt::tab_style(
        style = gt::cell_text(weight = "bold"),
        locations = gt::cells_stub(
          rows = scale %in%
            c("Attention Index (ATT)", "Executive Functions Index (EXE)")
        )
      ) |>
      gt::cols_align(
        align = "center",
        columns = c("score", "percentile", "range")
      ) # <-- End of pipe chain

    # Add footnotes individually
    if (!is.null(fn_scaled_score)) {
      table <- table |>
        gt::tab_footnote(
          footnote = fn_scaled_score,
          locations = gt::cells_row_groups(groups = grp_scaled_score)
        )
    }
    if (!is.null(fn_standard_score)) {
      table <- table |>
        gt::tab_footnote(
          footnote = fn_standard_score,
          locations = gt::cells_row_groups(groups = grp_standard_score)
        )
    }
    if (!is.null(fn_t_score)) {
      table <- table |>
        gt::tab_footnote(
          footnote = fn_t_score,
          locations = gt::cells_row_groups(groups = grp_t_score)
        )
    }

    # Adding source note and styling
    table <- table |>
      gt::tab_style(
        style = gt::cell_text(size = "small"),
        locations = gt::cells_source_notes()
      ) |>
      gt::tab_source_note(source_note = source_note) |>
      gtExtras::gt_theme_538() |>
      gt::tab_options(
        row_group.font.weight = "bold",
        footnotes.multiline = multiline,
        footnotes.font.size = "small",
        footnotes.sep = "  " # Adjust spacing between footnotes
      ) |>
      gt::opt_vertical_padding(scale = vertical_padding)

    # Save outputs
    gt::gtsave(table, glue::glue("table_{pheno}.png"))
    gt::gtsave(table, glue::glue("table_{pheno}.pdf"))

    return(table)
  }
```

```{r}
#| label: qtbl-iq
#| dev: tikz
#| fig-process: pdf2png
#| include: false
#| eval: true

# Set the default engine for tikz to "xetex"
options(tikzDefaultEngine = "xetex")

# Define the scales to include
subset <- c(
  "Auditory Working Memory (AWMI)",
  "Cognitive Proficiency (CPI)",
  "Crystallized Knowledge",
  "Fluid Reasoning (FRI)",
  "Fluid Reasoning",
  "Full Scale (FSIQ)",
  "Full Scale IQ (FSIQ)",
  "General Ability (GAI)",
  "General Ability",
  "General Intelligence",
  "Global Neurocognitive Index (G)",
  "NAB Attention Index",
  "NAB Executive Functions Index",
  "NAB Language Index",
  "NAB Memory Index",
  "NAB Spatial Index",
  "NAB Total Index",
  "Nonverbal (NVI)",
  "Perceptual Reasoning (PRI)",
  "Perceptual Reasoning",
  "Processing Speed (PSI)",
  "Processing Speed",
  "RBANS Total Index",
  "Test of Premorbid Functioning",
  "TOPF Standard Score",
  "Total NAB Index (T-NAB)",
  "Verbal Comprehension (VCI)",
  "Verbal Comprehension",
  "Visual Perception/Construction",
  "Visual Spatial (VSI)",
  "Vocabulary Acquisition (VAI)",
  "Word Reading",
  "Working Memory (WMI)",
  "Working Memory",
  "Attention Index (ATT)",
  "Language Index (LAN)",
  "Spatial Index (SPT)",
  "Memory Index (MEM)",
  "Executive Functions Index (EXE)"
)

# Filter the data to subset only the specified scales
data_iq <- dplyr::filter(data_iq, scale %in% subset)

# Define the table name, vertical padding, and multiline setting
pheno <- "iq"
table_name <- "table_iq"
vertical_padding <- 0
multiline <- TRUE

# footnotes
fn_standard_score <- gt::md(
  "Standard score: Mean = 100 [50th‰], SD ± 15 [16th‰, 84th‰]"
)

source_note <- gt::md(
  "Standard score: Mean = 100 [50th‰], SD ± 15 [16th‰, 84th‰]"
)

# Define the groups for the table
grp_iq <- list(
  standard_score = c(
    "Composite Scores",
    "Test of Premorbid Functioning",
    "WAIS-IV",
    "WAIS-4",
    "WASI-2",
    "WISC-5",
    "WISC-V",
    "WRAT-5",
    "KTEA-3",
    "NAB",
    "NAB-S",
    "RBANS",
    "WPPSI-IV",
    "WAIS-5"
  )
)

# Create the table using the tbl_gt function from the bwu library
bwu::tbl_gt(
  data = data_iq,
  pheno = pheno,
  table_name = table_name,
  vertical_padding = vertical_padding,
  source_note = source_note,
  # fn_standard_score = fn_standard_score,
  # grp_standard_score = grp_iq[["standard_score"]],
  dynamic_grp = grp_iq,
  multiline = multiline
)
```

```{r}
#| label: fig-iq-subdomain
#| include: false
#| fig-cap: "_Premorbid Ability_ is an estimate of an individual's intellectual functioning prior to known or suspected onset of brain disease or dysfunction. _General Ability_ is the overall skill to reason, solve problems, and gain useful knowledge. _Crystallized Knowledge_ involves understanding the world through language and reasoning. _Fluid Reasoning_ is the logical analysis and solution of new problems, identifying underlying patterns, and applying logic."

# Define the x and y variables for the dotplot
# x <- data_iq$z
# y <- data_iq$scale

x <- data_iq$z_mean_subdomain
y <- data_iq$subdomain

# plot args
colors <- NULL
return_plot <- TRUE
filename <- "fig_iq_subdomain.svg"

# Define the scales to keep
# keep <- c("General Ability", "Crystallized Knowledge", "Fluid Reasoning")
# data_iq <- dplyr::filter(data_iq, scale %in% keep)

# Create the dotplot using the dotplot function from the bwu library
bwu::dotplot(
  data = data_iq,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)
```

```{r}
#| label: fig-iq-narrow
#| include: false
#| fig-cap: "_Premorbid Ability_ is an estimate of an individual's intellectual functioning prior to known or suspected onset of brain disease or dysfunction. _General Ability_ is the overall skill to reason, solve problems, and gain useful knowledge. _Crystallized Knowledge_ involves understanding the world through language and reasoning. _Fluid Reasoning_ is the logical analysis and solution of new problems, identifying underlying patterns, and applying logic."

# Define the x and y variables for the dotplot
x <- data_iq$z_mean_narrow
y <- data_iq$narrow

# plot args
colors <- NULL
return_plot <- TRUE

# Define the filename for the plot
filename <- "fig_iq_narrow.svg"

# Define the scales to keep
# keep <- c("General Ability", "Crystallized Knowledge", "Fluid Reasoning")
# data_iq <- dplyr::filter(data_iq, scale %in% keep)

# Create the dotplot using the dotplot function from the bwu library
bwu::dotplot(
  data = data_iq,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)
```


```{=typst}
// Define a function to create a domain with a title, a table, and a figure
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
  grid(
    columns: (50%, 50%),
    gutter: 8pt,
    figure(
      [#image(file_qtbl)],
      caption: figure.caption(position: top, [#title]),
      kind: "qtbl",
      supplement: [*Table*],
    ),
    figure(
      [#image(file_fig, width: auto)],
      caption: figure.caption(
        position: bottom,
        [
        _Premorbid Ability_ is an estimate of an individual's intellectual functioning prior to known or suspected onset of brain disease or dysfunction. _General Ability_ is the overall skill to reason, solve problems, and gain useful knowledge. _Crystallized Knowledge_ involves understanding the world through language and reasoning. _Fluid Reasoning_ is the logical analysis and solution of new problems, identifying underlying patterns, and applying logic. #footnote[In the figures presented here and below, scores have been converted to _z_-scores, where an average score is 0.0 and the standard deviation is 1.0. Any scores below the −1.0 ticks are moderately concerning. Scores at or beyond the −2.0 ticks are clinically significant and a cause for greater concern.]
        ],
      ),
      placement: none,
      kind: "image",
      supplement: [*Figure*],
      gap: 0.5em,
    ),
  )
}
```

```{=typst}
// Define the title of the domain
#let title = "General Cognitive Ability"

// Define the file name of the table
#let file_qtbl = "table_iq.png"

// Define the file name of the figure
#let file_fig = "fig_iq_subdomain.svg"

// The title is appended with ' Index Scores'
#domain(title: [#title Scores], file_qtbl, file_fig)
```


```{=typst}
// Define the title of the domain
#let title = "General Cognitive Ability"

// Define the file name of the table
#let file_qtbl = "table_iq.png"

// Define the file name of the figure
#let file_fig = "fig_iq_narrow.svg"

// The title is appended with ' Index Scores'
#domain(title: [#title Scores], file_qtbl, file_fig)
```
