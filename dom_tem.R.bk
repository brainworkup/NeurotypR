#' Load and filter neuropsychological test scales
#'
#' This function imports the comprehensive list of neuropsychological test scales
#' from the scales.R file and provides flexible filtering capabilities for
#' selecting appropriate scales for specific domains, tests, or categories.
#'
#' @param test_pattern Character vector or regex pattern to filter scales by test name.
#'   Examples: "CVLT", "NAB", "WAIS", etc. Can be a vector for multiple tests.
#' @param domain_pattern Character vector to filter scales by domain-related keywords.
#'   Examples: "Memory", "Executive", "Attention", etc.
#' @param exclude_pattern Character vector of patterns to exclude from results.
#' @param include_composites Logical. Whether to include composite/index scores.
#'   Default is TRUE.
#' @param include_subtest_scores Logical. Whether to include individual subtest scores.
#'   Default is TRUE.
#' @param custom_scales Character vector of additional custom scales to include.
#' @param return_all Logical. If TRUE, returns all scales without filtering.
#'   Default is FALSE.
#'
#' @return Character vector of filtered scale names
#' @export
#'
#' @examples
#' # Get all memory-related scales
#' memory_scales <- get_neuropsych_scales(
#'   domain_pattern = c("Memory", "Recall", "Recognition")
#' )
#'
#' # Get CVLT scales specifically
#' cvlt_scales <- get_neuropsych_scales(test_pattern = "CVLT")
#'
#' # Get NAB scales excluding certain patterns
#' nab_scales <- get_neuropsych_scales(
#'   test_pattern = "NAB",
#'   exclude_pattern = c("False Alarms", "Errors")
#' )
#'
#' # Get all available scales
#' all_scales <- get_neuropsych_scales(return_all = TRUE)
get_neuropsych_scales <- function(
  test_pattern = NULL,
  domain_pattern = NULL,
  exclude_pattern = NULL,
  include_composites = TRUE,
  include_subtest_scores = TRUE,
  custom_scales = NULL,
  return_all = FALSE
) {
  
  # Source the scales from scales.R
  if (!exists("scales") || is.null(scales)) {
    # Try to load scales from the scales.R file
    scales_file <- system.file("R", "scales.R", package = "NeurotypR")
    if (file.exists(scales_file)) {
      source(scales_file, local = TRUE)
    } else {
      # Fallback: try to load from current directory
      if (file.exists("R/scales.R")) {
        source("R/scales.R", local = TRUE)
      } else {
        stop("Cannot find scales.R file. Please ensure it exists in R/ directory.")
      }
    }
  }
  
  # If return_all is TRUE, return all scales plus any custom scales
  if (return_all) {
    result_scales <- scales
    if (!is.null(custom_scales)) {
      result_scales <- unique(c(result_scales, custom_scales))
    }
    return(result_scales)
  }
  
  # Start with all scales
  filtered_scales <- scales
  
  # Filter by test pattern
  if (!is.null(test_pattern)) {
    test_matches <- character(0)
    for (pattern in test_pattern) {
      matches <- grep(pattern, filtered_scales, value = TRUE, ignore.case = TRUE)
      test_matches <- c(test_matches, matches)
    }
    filtered_scales <- unique(test_matches)
  }
  
  # Filter by domain pattern
  if (!is.null(domain_pattern)) {
    domain_matches <- character(0)
    for (pattern in domain_pattern) {
      matches <- grep(pattern, filtered_scales, value = TRUE, ignore.case = TRUE)
      domain_matches <- c(domain_matches, matches)
    }
    if (!is.null(test_pattern)) {
      # If both test and domain patterns specified, take intersection
      filtered_scales <- intersect(filtered_scales, domain_matches)
    } else {
      # If only domain pattern specified, use domain matches
      filtered_scales <- unique(domain_matches)
    }
  }
  
  # Exclude patterns
  if (!is.null(exclude_pattern)) {
    for (pattern in exclude_pattern) {
      filtered_scales <- grep(pattern, filtered_scales, value = TRUE, 
                            invert = TRUE, ignore.case = TRUE)
    }
  }
  
  # Filter by composite/subtest preferences
  if (!include_composites) {
    # Remove common composite indicators
    composite_patterns <- c("Index", "Composite", "Total", "Overall", "Domain")
    for (pattern in composite_patterns) {
      filtered_scales <- grep(pattern, filtered_scales, value = TRUE, 
                            invert = TRUE, ignore.case = TRUE)
    }
  }
  
  if (!include_subtest_scores) {
    # Keep only scales that appear to be composites or indices
    composite_patterns <- c("Index", "Composite", "Total", "Overall", "Domain")
    composite_matches <- character(0)
    for (pattern in composite_patterns) {
      matches <- grep(pattern, filtered_scales, value = TRUE, ignore.case = TRUE)
      composite_matches <- c(composite_matches, matches)
    }
    filtered_scales <- unique(composite_matches)
  }
  
  # Add custom scales
  if (!is.null(custom_scales)) {
    filtered_scales <- unique(c(filtered_scales, custom_scales))
  }
  
  # Remove duplicates and sort
  filtered_scales <- unique(filtered_scales)
  filtered_scales <- sort(filtered_scales)
  
  # Return empty character vector if no matches
  if (length(filtered_scales) == 0) {
    warning("No scales matched the specified criteria.")
    return(character(0))
  }
  
  return(filtered_scales)
}

#' Create a neuropsychological domain-specific Quarto document
#'
#' @param domain Character vector of domain names (e.g., "Attention/Executive")
#' @param pheno Short name for the domain used in filenames (e.g., "executive")
#' @param scales Vector of test scales to include in the domain
#' @param table_filters Optional additional filtering criteria for tables
#' @param exclude_from_plots Vector of scales to exclude from plots
#' @param subdomain_plot_title Caption for subdomain plot
#' @param narrow_plot_title Caption for narrow plot
#' @param output_file Output filename (if NULL, uses pattern "_02-XX_[pheno].qmd")
#'
#' @return Invisibly returns TRUE if successful
#' @export
#'
#' @examples
#' # Basic usage
#' create_neuropsych_domain(
#'   domain = "Attention/Executive",
#'   pheno = "executive"
#' )
#'
#' # With custom scales and titles
#' create_neuropsych_domain(
#'   domain = "Memory",
#'   pheno = "memory",
#'   subdomain_plot_title = "Memory function across subdomains"
#' )
create_neuropsych_domain <- function(
  domain,
  pheno,
  scales = NULL,
  table_filters = NULL,
  exclude_from_plots = NULL,
  subdomain_plot_title = "Domain-specific cognitive functions are essential for successful cognitive functioning, enabling us to perform everyday tasks, handle academic challenges, solve problems, manage our emotions, and interact effectively with others and our environment.",
  narrow_plot_title = subdomain_plot_title,
  output_file = NULL
) {
  # Set default output file if not specified
  if (is.null(output_file)) {
    # Find a domain number (assumes standard naming pattern)
    domain_numbers <- c(
      "iq" = "01",
      "academics" = "02",
      "verbal" = "03",
      "spatial" = "04",
      "memory" = "05",
      "executive" = "06",
      "motor" = "07",
      "social" = "08",
      "adhd_child" = "09",
      "adhd_adult" = "09",
      "emotion_child" = "10",
      "emotion_adult" = "10",
      "adaptive" = "11",
      "daily_living" = "12"
    )

    domain_num <- domain_numbers[pheno]
    if (is.na(domain_num)) {
      domain_num <- "XX"
    } # Fallback if domain not found

    output_file <- paste0("_02-", domain_num, "_", pheno, ".qmd")
  }

  # Default scales appropriate for common executive function tests
  if (is.null(scales)) {
    scales <- get_default_scales(pheno)
  }

  # Generate the Quarto document content
  qmd_content <- generate_qmd_content(
    domain = domain,
    pheno = pheno,
    scales = scales,
    table_filters = table_filters,
    exclude_from_plots = exclude_from_plots,
    subdomain_plot_title = subdomain_plot_title,
    narrow_plot_title = narrow_plot_title
  )

  # Write to file
  writeLines(qmd_content, output_file)

  # Generate the text file as well
  text_file <- gsub("\\.qmd$", "_text.qmd", output_file)
  if (!file.exists(text_file)) {
    writeLines("", text_file)
  }

  return(invisible(TRUE))
}

#' Generate the QMD content for a neuropsychological domain
#'
#' @param domain Domain name
#' @param pheno Short name for domain
#' @param scales Vector of test scales
#' @param table_filters Additional filtering criteria
#' @param exclude_from_plots Scales to exclude from plots
#' @param subdomain_plot_title Caption for subdomain plot
#' @param narrow_plot_title Caption for narrow plot
#'
#' @return A character string containing the QMD content
#' @keywords internal
generate_qmd_content <- function(
  domain,
  pheno,
  scales,
  table_filters,
  exclude_from_plots,
  subdomain_plot_title,
  narrow_plot_title
) {
  # Create the header section
  header <- paste0("## ", domain, " {#sec-", pheno, "}\n\n")
  include_line <- paste0(
    "{{< include _02-",
    get_domain_number(pheno),
    "_",
    pheno,
    "_text.qmd >}}\n\n"
  )

  # Setup chunk
  setup_chunk <- paste0(
    "```{r}\n",
    "#| label: setup-",
    pheno,
    "\n",
    "#| include: false\n\n",
    "# domain\n",
    "domains <- c(\"",
    paste(domain, collapse = "\", \""),
    "\")\n\n",
    "# Target phenotype\n",
    "pheno <- \"",
    pheno,
    "\"\n",
    "```\n\n"
  )

  # Export chunk
  export_chunk <- paste0(
    "```{r}\n",
    "#| label: export-",
    pheno,
    "\n",
    "#| include: false\n\n",
    "# Read the CSV file into a data frame\n",
    pheno,
    " <- readr::read_csv(\"data/neurocog.csv\")\n\n",
    "# Filter the data frame based on certain conditions\n",
    "# Keep only the rows where 'domain' equals 'domains' and 'z_mean_domain' is not NA\n",
    pheno,
    " <- ",
    pheno,
    " |>\n",
    "  dplyr::filter(domain %in% domains)\n\n",
    "# Select specific columns from the data frame\n",
    pheno,
    " <- ",
    pheno,
    " |>\n",
    "  dplyr::select(\n",
    "    scale,\n",
    "    test,\n",
    "    test_name,\n",
    "    raw_score,\n",
    "    score,\n",
    "    ci_95,\n",
    "    percentile,\n",
    "    range,\n",
    "    domain,\n",
    "    subdomain,\n",
    "    narrow,\n",
    "    pass,\n",
    "    verbal,\n",
    "    timed,\n",
    "    result,\n",
    "    z,\n",
    "    z_mean_domain,\n",
    "    z_sd_domain,\n",
    "    z_mean_subdomain,\n",
    "    z_sd_subdomain,\n",
    "    z_mean_narrow,\n",
    "    z_sd_narrow,\n",
    "    z_mean_pass,\n",
    "    z_sd_pass,\n",
    "    z_mean_verbal,\n",
    "    z_sd_verbal,\n",
    "    z_mean_timed,\n",
    "    z_sd_timed\n",
    "  )\n\n",
    "# Write the '",
    pheno,
    "' data frame to a CSV file\n",
    "readr::write_excel_csv(\n",
    "  ",
    pheno,
    ",\n",
    "  here::here(\"data\", paste0(pheno, \".csv\")),\n",
    # "  paste0(pheno, \".csv\"),\n",
    "  na = \"\",\n",
    "  col_names = TRUE,\n",
    "  append = FALSE\n",
    ")\n",
    "```\n\n"
  )

  # Data chunk with scales
  data_chunk <- paste0(
    "```{r}\n",
    "#| label: data-",
    pheno,
    "\n",
    "#| include: false\n\n",
    "scales <- c(\n  ",
    paste0("\"", scales, "\"", collapse = ",\n  "),
    "\n)\n\n",
    "# Filter the data using the filter_data function from the `NeurotypR` library\n",
    "data_",
    pheno,
    " <- NeurotypR::filter_data(\n",
    "  data = ",
    pheno,
    ",\n",
    "  domain = domains,\n",
    "  scale = scales\n",
    ")\n",
    "```\n\n"
  )

  # Text generation chunk
  text_chunk <- paste0(
    "```{r}\n",
    "#| label: text-",
    pheno,
    "\n",
    "#| cache: true\n",
    "#| include: false\n\n",
    "# Generate the text for the ",
    pheno,
    " domain\n",
    "NeurotypR::cat_neuropsych_results(\n",
    "  data = data_",
    pheno,
    ",\n",
    "  file = \"_02-",
    get_domain_number(pheno),
    "_",
    pheno,
    "_text.qmd\"\n",
    ")\n",
    "```\n\n"
  )

  # Table generation chunk
  table_chunk <- paste0(
    "```{r}\n",
    "#| label: qtbl-",
    pheno,
    "\n",
    "#| dev: tikz\n",
    "#| fig-process: pdf2png\n",
    "#| include: false\n\n",
    "# Set the default engine for tikz to \"xetex\"\n",
    "options(tikzDefaultEngine = \"xetex\")\n\n",
    "# more filtering for tables\n",
    "data_",
    pheno,
    "_tbl <-\n",
    "  data_",
    pheno,
    "|>\n",
    "  dplyr::filter(\n",
    "    scale %in%\n",
    "      c(\n",
    "        \"Name of Scale\",\n",
    "      )\n",
    "  )\n\n",
    "# table arguments\n",
    "table_name <- \"table_executive\"\n",
    "vertical_padding <- 0\n",
    "multiline <- TRUE\n\n",
    "# footnotes\n",
    "fn_scaled_score <- gt::md(\n",
    "  \"Scaled score: Mean = 10 [50th‰], SD ± 3 [16th‰, 84th‰]\"\n",
    ")\n\n",
    "fn_standard_score <- gt::md(\n",
    "  \"Standard score: Mean = 100 [50th‰], SD ± 15 [16th‰, 84th‰]\"\n",
    ")\n\n",
    "fn_t_score <- gt::md(\"T score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰]\")\n\n",
    "fn_z_score <- gt::md(\"z-score: Mean = 0 [50th‰], SD ± 1 [16th‰, 84th‰]\")\n\n",
    "source_note <- gt::md(\"_T_ score: Mean = 50 [50th‰], SD ± 10 [16th‰, 84th‰]\")\n\n",
    "# groupings - get unique test names that actually exist in the data\n",
    "existing_test_names <- unique(data_executive_tbl$test_name)\n",
    "existing_test_names <- existing_test_names[!is.na(existing_test_names)]\n\n",
    "# Define all possible groupings\n",
    "all_grp_executive <- list(\n",
    "  scaled_score = c(\n",
    "    \"D-KEFS Color-Word Interference\",\n",
    "    \"NEPSY-2\",\n",
    "    \"RBANS\",\n",
    "    \"WAIS-5\",\n",
    "    \"WAIS-IV\",\n",
    "    \"WISC-V\",\n",
    "    \"WPPSI-IV\"\n",
    "  ),\n",
    "  standard_score = c(\n",
    "    \"NAB-S\",\n",
    "    \"NAB\",\n",
    "    \"RBANS\",\n",
    "    \"WAIS-5\",\n",
    "    \"WAIS-IV\",\n",
    "    \"WISC-V\",\n",
    "    \"WPPSI-IV\"\n",
    "  ),\n",
    "  t_score = c(\n",
    "    \"NAB-S\",\n",
    "    \"NAB\",\n",
    "    \"NIH EXAMINER\",\n",
    "    \"Trail Making Test\"\n",
    "  )\n",
    ")\n\n",
    "# Filter groupings to only include test names that exist in the data\n",
    "grp_executive <- list(\n",
    "  scaled_score = intersect(\n",
    "    all_grp_executive[[\"scaled_score\"]],\n",
    "    existing_test_names\n",
    "  ),\n",
    "  standard_score = intersect(\n",
    "    all_grp_executive[[\"standard_score\"]],\n",
    "    existing_test_names\n",
    "  ),\n",
    "  t_score = intersect(all_grp_executive[[\"t_score\"]], existing_test_names)\n",
    ")\n\n",
    "# Only create table if we have data\n",
    "if (nrow(data_executive_tbl) > 0) {\n",
    "  # make `gt` table\n",
    "  NeurotypR::tbl_gt2(\n",
    "    data = data_executive_tbl,\n",
    "    pheno = pheno,\n",
    "    table_name = table_name,\n",
    "    # source_note = source_note,\n",
    "    fn_scaled_score = if (length(grp_executive[[\"scaled_score\"]]) > 0) {\n",
    "      fn_scaled_score\n",
    "    } else {\n",
    "      NULL\n",
    "    },\n",
    "    fn_standard_score = if (length(grp_executive[[\"standard_score\"]]) > 0) {\n",
    "      fn_standard_score\n",
    "    } else {\n",
    "      NULL\n",
    "    },\n",
    "    fn_t_score = if (length(grp_executive[[\"t_score\"]]) > 0) {\n",
    "      fn_t_score\n",
    "    } else {\n",
    "      NULL\n",
    "    },\n",
    "    grp_scaled_score = if (length(grp_executive[[\"scaled_score\"]]) > 0) {\n",
    "      grp_executive[[\"scaled_score\"]]\n",
    "    } else {\n",
    "      NULL\n",
    "    },\n",
    "    grp_standard_score = if (length(grp_executive[[\"standard_score\"]]) > 0) {\n",
    "      grp_executive[[\"standard_score\"]]\n",
    "    } else {\n",
    "      NULL\n",
    "    },\n",
    "    grp_t_score = if (length(grp_executive[[\"t_score\"]]) > 0) {\n",
    "      grp_executive[[\"t_score\"]]\n",
    "    } else {\n",
    "      NULL\n",
    "    },\n",
    "    dynamic_grp = grp_executive,\n",
    "    vertical_padding = vertical_padding,\n",
    "    multiline = multiline\n",
    "  )\n",
    "} else {\n",
    "  # Create empty placeholder if no data\n",
    "  message(\"No executive function data available for table creation\")\n",
    "}\n",
    "```\n\n"
  )

  # Subdomain figure chunk
  subdomain_fig_chunk <- paste0(
    "```{r}\n",
    "#| label: fig-",
    pheno,
    "-subdomain\n",
    "#| include: false\n",
    "#| fig-cap: \"",
    subdomain_plot_title,
    "\"\n\n"
  )

  # Add exclusions if provided
  if (!is.null(exclude_from_plots)) {
    exclusion_list <- paste0(
      "c(\n  \"",
      paste(exclude_from_plots, collapse = "\",\n  \""),
      "\"\n)"
    )
    subdomain_fig_chunk <- paste0(
      subdomain_fig_chunk,
      "exclude_scales <- ",
      exclusion_list,
      "\n\n",
      "data_",
      pheno,
      " <- data_",
      pheno,
      " |>\n",
      "  dplyr::filter(!scale %in% exclude_scales)\n\n"
    )
  }

  # Continue subdomain figure chunk
  subdomain_fig_chunk <- paste0(
    subdomain_fig_chunk,
    "# dotplot arguments\n",
    "filename <- \"fig_",
    pheno,
    "_subdomain.svg\"\n",
    "colors <- NULL\n",
    "return_plot <- TRUE\n\n",
    "# dotplot variables to plot (x, y)\n",
    "x <- data_",
    pheno,
    "$z_mean_subdomain\n",
    "y <- data_",
    pheno,
    "$subdomain\n\n",
    "NeurotypR::dotplot2(\n",
    "  data = data_",
    pheno,
    ",\n",
    "  x = x,\n",
    "  y = y,\n",
    "  colors = colors,\n",
    "  return_plot = return_plot,\n",
    "  filename = filename,\n",
    "  na.rm = TRUE\n",
    ")\n",
    "```\n\n"
  )

  # Narrow figure chunk
  narrow_fig_chunk <- paste0(
    "```{r}\n",
    "#| label: fig-",
    pheno,
    "-narrow\n",
    "#| include: false\n",
    "#| fig-cap: \"",
    narrow_plot_title,
    "\"\n\n",
    "# dotplot arguments\n",
    "filename <- \"fig_",
    pheno,
    "_narrow.svg\"\n",
    "colors <- NULL\n",
    "return_plot <- TRUE\n\n",
    "# dotplot variables to plot (x, y)\n",
    "x <- data_",
    pheno,
    "$z_mean_narrow\n",
    "y <- data_",
    pheno,
    "$narrow\n\n",
    "NeurotypR::dotplot2(\n",
    "  data = data_",
    pheno,
    ",\n",
    "  x = x,\n",
    "  y = y,\n",
    "  colors = colors,\n",
    "  return_plot = return_plot,\n",
    "  filename = filename,\n",
    "  na.rm = TRUE\n",
    ")\n",
    "```\n\n"
  )

  # Typst code for domain layout
  typst_domain_function <- paste0(
    "```{=typst}\n",
    "#let domain(title: none, file_qtbl, file_fig) = {\n",
    "  let font = (font: \"Roboto Slab\", size: 0.7em)\n",
    "  set text(..font)\n",
    "  pad(top: 0.5em)[]\n",
    "    grid(\n",
    "      columns: (50%, 50%),\n",
    "      gutter: 8pt,\n",
    "        figure([#image(file_qtbl)],\n",
    "          caption: figure.caption(position: top, [#title]),\n",
    "          kind: \"qtbl\",\n",
    "          supplement: [Table],\n",
    "          ),\n",
    "        figure([#image(file_fig, width: auto)],\n",
    "          caption: figure.caption(position: bottom, [\n",
    "            ",
    subdomain_plot_title,
    "\n",
    "            ]),\n",
    "          placement: none,\n",
    "          kind: \"image\",\n",
    "          supplement: [Figure],\n",
    "          gap: 0.5em,\n",
    "        ),\n",
    "      )\n",
    "  }\n",
    "```\n\n"
  )

  # Typst code for subdomain figure
  typst_subdomain <- paste0(
    "```{=typst}\n",
    "#let title = \"",
    domain,
    "\"\n",
    "#let file_qtbl = \"table_",
    pheno,
    ".png\"\n",
    "#let file_fig = \"fig_",
    pheno,
    "_subdomain.svg\"\n",
    "#domain(\n",
    "  title: [#title Scores],\n",
    "  file_qtbl,\n",
    "  file_fig\n",
    "  )\n",
    "```\n\n"
  )

  # Typst code for narrow figure
  typst_narrow <- paste0(
    "```{=typst}\n",
    "#let title = \"",
    domain,
    "\"\n",
    "#let file_qtbl = \"table_",
    pheno,
    ".png\"\n",
    "#let file_fig = \"fig_",
    pheno,
    "_narrow.svg\"\n",
    "#domain(\n",
    "  title: [#title Scores],\n",
    "  file_qtbl,\n",
    "  file_fig\n",
    "  )\n",
    "```\n\n"
  )

  # Combine all sections
  qmd_content <- paste0(
    header,
    include_line,
    setup_chunk,
    export_chunk,
    data_chunk,
    text_chunk,
    table_chunk,
    subdomain_fig_chunk,
    narrow_fig_chunk,
    typst_domain_function,
    typst_subdomain,
    typst_narrow
  )

  return(qmd_content)
}

#' Get the domain number for a given domain
#'
#' @param pheno Domain phenotype
#' @return Character string with domain number
#' @keywords internal
get_domain_number <- function(pheno) {
  domain_numbers <- c(
    "iq" = "01",
    "academics" = "02",
    "verbal" = "03",
    "spatial" = "04",
    "memory" = "05",
    "executive" = "06",
    "motor" = "07",
    "social" = "08",
    "adhd_child" = "09",
    "adhd_adult" = "09",
    "emotion_child" = "10",
    "emotion_adult" = "10",
    "adaptive" = "11",
    "daily_living" = "12"
  )

  domain_num <- domain_numbers[pheno]
  if (is.na(domain_num)) {
    domain_num <- "XX"
  }

  return(domain_num)
}

#' Get default scales for a given domain
#'
#' @param pheno Domain phenotype
#' @return Vector of scale names
#' @keywords internal
get_default_scales <- function(pheno) {
  # Default scales for executive function
  if (pheno == "executive") {
    return(c(
      "Animal Coding",
      "Arithmetic",
      "Attention Domain",
      "Attention Index (ATT)",
      "Attention Index",
      "Auditory Working Memory (AWMI)",
      "Bug Search",
      "Cancellation Random",
      "Cancellation Structured",
      "Cancellation",
      "Categories",
      "Category Fluency",
      "Clock Drawing",
      "Coding",
      "Cognitive Proficiency (CPI)",
      "Comprehension",
      "CVLT-3 Total Intrusions",
      "CVLT-3 Total Repetitions",
      "D-KEFS Color Naming",
      "D-KEFS Inhibition Total Errors",
      "D-KEFS Inhibition",
      "D-KEFS Switching Total Errors",
      "D-KEFS Switching",
      "D-KEFS Word Reading",
      "Color Naming",
      "Inhibition Total Errors",
      "Inhibition",
      "Switching Total Errors",
      "Switching",
      "Word Reading",
      "Digit Span Backward",
      "Digit Span Forward",
      "Digit Span Sequencing",
      "Digit Span",
      "Digits Backward Longest Span",
      "Digits Backward",
      "Digits Forward Longest Span",
      "Digits Forward",
      "Dots",
      "Driving Scenes",
      "Executive Functions Domain",
      "Executive Index",
      "Executive Functions Index (EXE)",
      "Judgment",
      "Letter Fluency",
      "Letter-Number Sequencing",
      "List Memory Intrusions",
      "List Memory Repetitions",
      "Longest Digit Span Backward",
      "Longest Digit Span Forward",
      "Longest Digit Span Sequence",
      "Longest Letter-Number Sequence",
      "Mazes",
      "NAB Attention Index",
      "NAB Executive Functions Index",
      "Executive Functions Index (EXE)",
      "Numbers & Letters Part A Efficiency",
      "Numbers & Letters Part A Errors",
      "Numbers & Letters Part A Speed",
      "Numbers & Letters Part B Efficiency",
      "Numbers & Letters Part C Efficiency",
      "Numbers & Letters Part D Disruption",
      "Numbers & Letters Part D Efficiency",
      "Orientation to Place",
      "Orientation to Self",
      "Orientation to Situation",
      "Orientation to Time",
      "Orientation",
      "Picture Memory",
      "Picture Span",
      "Processing Speed (PSI)",
      "Processing Speed",
      "Psychomotor Speed",
      "RBANS Coding",
      "RBANS Digit Span",
      "ROCFT Copy",
      "Sentence Repetition",
      "Similarities",
      "Spatial Addition",
      "Spatial Span",
      "Statue-Body Movement",
      "Statue-Eye Opening",
      "Statue-Vocalization",
      "Statue",
      "Symbol Search",
      "Symbol Span",
      "TMT, Part A",
      "TMT, Part B",
      "Total Deviation Score",
      "Unstructured Task",
      "Word Generation Perseverations",
      "Word Generation",
      "Working Memory (WMI)",
      "Working Memory",
      "Zoo Locations",
      "Writing Legibility",
      "Writing Spelling",
      "Writing Syntax",
      "Writing Conveyance",
      "List Learning Semantic Clusters",
      "List Learning Perseverations",
      "List Learning Intrusions",
      "Figure Drawing Copy Organization",
      "Figure Drawing Copy Fragmentation",
      "Figure Drawing Copy Planning",
      "Figure Drawing Immediate Recall Organization",
      "Figure Drawing Immediate Recall Fragmentation",
      "Figure Drawing Immediate Recall Planning"
    ))
  }
  if (pheno == "iq") {
    return(c(
      "Auditory Working Memory (AWMI)",
      "Cognitive Proficiency (CPI)",
      "Crystallized Knowledge",
      "Fluid Reasoning (FRI)",
      "Fluid Reasoning",
      "Full Scale (FSIQ)",
      "Full Scale IQ (FSIQ)",
      "General Ability (GAI)",
      "General Ability",
      "General Intelligence",
      "Global Neurocognitive Index (G)",
      "NAB Attention Index",
      "NAB Executive Functions Index",
      "NAB Language Index",
      "NAB Memory Index",
      "NAB Spatial Index",
      "NAB Total Index",
      "Nonverbal (NVI)",
      "Perceptual Reasoning (PRI)",
      "Perceptual Reasoning",
      "Processing Speed (PSI)",
      "Processing Speed",
      "RBANS Total Index",
      "Test of Premorbid Functioning",
      "TOPF Standard Score",
      "Total NAB Index (T-NAB)",
      "Verbal Comprehension (VCI)",
      "Verbal Comprehension",
      "Visual Perception/Construction",
      "Visual Spatial (VSI)",
      "Vocabulary Acquisition (VAI)",
      "Word Reading",
      "Working Memory (WMI)",
      "Working Memory",
      "Attention Index (ATT)",
      "Language Index (LAN)",
      "Spatial Index (SPT)",
      "Memory Index (MEM)",
      "Executive Functions Index (EXE)"
    ))
  }

  if (pheno == "academics") {
    return(c(
      "Academic Fluency Composite",
      "Academic Language Readiness Index",
      "Academic Skills Battery (ASB) Composite",
      "Alphabet Writing Fluency",
      "Associational Fluency",
      "Basic Reading",
      "Comprehension Composite",
      "Decoding Composite",
      "Decoding Fluency",
      "Decoding",
      "Dyslexia Index",
      "Essay Composition",
      "Expression Composite",
      "Expressive Vocabulary",
      "Letter & Word Recognition",
      "Letter Naming Facility",
      "Listening Comprehension",
      "Math Composite",
      "Math Computation",
      "Math Concepts & Applications",
      "Math Fluency-Addition",
      "Math Fluency-Multiplication",
      "Math Fluency-Subtraction",
      "Math Fluency",
      "Math Problem Solving",
      "Mathematics",
      "Nonsense Word Decoding",
      "Numerical Operations",
      "Object Naming Facility",
      "Oral Discourse Comprehension",
      "Oral Expression",
      "Oral Fluency Composite",
      "Oral Language Composite",
      "Oral Reading Fluency",
      "Oral Word Fluency",
      "Orthographic Choice",
      "Orthographic Fluency",
      "Orthographic Processing Composite",
      "Orthographic Processing Extended",
      "Orthographic Processing",
      "Phonemic Proficiency",
      "Phonological Processing",
      "Pseudoword Decoding",
      "Reading Composite",
      "Reading Comprehension",
      "Reading Fluency Composite",
      "Reading Fluency",
      "Reading Index",
      "Reading Understanding Composite",
      "Reading Vocabulary",
      "Reading",
      "Receptive Vocabulary",
      "Sentence Composition",
      "Sentence Comprehension",
      "Sentence Repetition",
      "Sentence Writing Fluency",
      "Silent Reading Fluency",
      "Sound-Symbol Composite",
      "Spelling",
      "Total Achievement",
      "Word Reading",
      "Word Recognition Fluency",
      "Writing Fluency",
      "Written Expression",
      "Written Language Composite"
    ))
  }

  # Add cases for other domains as needed
  # ...

  # Default to empty if no domain match
  return(character(0))
}

#' Get domain groupings for a specific domain
#'
#' @param pheno Domain phenotype
#' @return List of groupings for the domain
#' @keywords internal
get_domain_groupings <- function(pheno) {
  if (pheno == "executive") {
    return(
      'list(
  scaled_score = c(
    "Color-Word Interference",
    "NEPSY-2",
    "RBANS",
    "WAIS-5",
    "WAIS-IV",
    "WISC-V",
    "WPPSI-IV"
  ),
  standard_score = c(
    # "NAB Attention Index",
    # "NAB Executive Functions",
    "NAB-S",
    "NAB",
    "RBANS",
    "WAIS-5",
    "WAIS-IV",
    # "WASI-II",
    "WISC-V",
    "WPPSI-IV"
  ),
  t_score = c(
    "NAB-S",
    "NAB",
    "NIH EXAMINER",
    "Trail Making Test"
  )
)'
    )
  }

  # Add cases for other domains as needed
  # ...

  # Default empty groupings
  return(
    'list(
  scaled_score = character(0),
  standard_score = character(0),
  t_score = character(0)
)'
  )
}

#' Run a neuropsych domain through the entire workflow
#'
#' @param domain_info List with domain parameters
#'
#' @return Invisibly returns TRUE
#' @export
run_neuropsych_domain <- function(domain_info) {
  # Create the domain QMD file
  create_neuropsych_domain(
    domain = domain_info$domain,
    pheno = domain_info$pheno,
    scales = domain_info$scales,
    table_filters = domain_info$table_filters,
    exclude_from_plots = domain_info$exclude_from_plots,
    subdomain_plot_title = domain_info$subdomain_plot_title,
    narrow_plot_title = domain_info$narrow_plot_title,
    output_file = domain_info$output_file
  )

  # Render the QMD file to Typst
  quarto::quarto_render(
    input = domain_info$output_file %||%
      paste0(
        "_02-",
        get_domain_number(domain_info$pheno),
        "_",
        domain_info$pheno,
        ".qmd"
      ),
    output_format = "typst"
  )

  return(invisible(TRUE))
}

# Helper for NULL coalescing
`%||%` <- function(x, y) if (is.null(x)) y else x
