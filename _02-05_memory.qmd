## Memory {#sec-memory}

{{< include _02-05_memory_text.qmd >}}

```{r}
#| label: setup-memory
#| include: false

# domain
domains <- c("Memory")

# Target phenotype
pheno <- "memory"
```

```{r}
#| label: export-memory
#| include: false

# Read the CSV file into a data frame
memory <- readr::read_csv("data/neurocog.csv")

# Filter the data frame based on certain conditions
# Keep only the rows where 'domain' equals 'domains' and 'z_mean_domain' is not NA
memory <- memory |>
  dplyr::filter(domain %in% domains)

# Select specific columns from the data frame
memory <- memory |>
  dplyr::select(
    scale,
    test,
    test_name,
    raw_score,
    score,
    score_type,
    ci_95,
    percentile,
    range,
    domain,
    subdomain,
    narrow,
    pass,
    verbal,
    timed,
    result,
    z,
    z_mean_domain,
    z_sd_domain,
    z_mean_subdomain,
    z_sd_subdomain,
    z_mean_narrow,
    z_sd_narrow,
    z_mean_pass,
    z_sd_pass,
    z_mean_verbal,
    z_sd_verbal,
    z_mean_timed,
    z_sd_timed
  )

# Write the 'memory' data frame to a CSV file
readr::write_excel_csv(
  memory,
  here::here("data", paste0(pheno, ".csv")),
  na = "",
  col_names = TRUE,
  append = FALSE
)
```

```{r}
#| label: data-memory
#| include: false

scales <- c(
  "Trial 1 Free Recall Total Correct",
  "Trial 5 Free Recall Total Correct",
  "Trials 1-5 Free Recall Total Correct",
  "List B Free Recall Total Correct",
  "Short Delay Free Recall Total Correct",
  "Short Delay Cued Recall Total Correct",
  "Long Delay Free Recall Total Correct",
  "Long Delay Cued Recall Total Correct",
  "Long Delay Yes/No Recognition Hits",
  "Long Delay Yes/No Recognition False Positives",
  "Free Recall Intrusions",
  "Cued-Recall Intrusions",
  "Total Intrusions",
  "Total Repetitions",
  "Trials 1-5 Semantic Clustering Ratio",
  "Trials 1-5 Serial Clustering Ratio",
  "Trials 1-5 % Recall Primacy",
  "Trials 1-5 % Recall Middle",
  "Trials 1-5 % Recall Recency",
  "Trails 1-5 Learning Slope",
  "Trails 1-5 Percent Recall Consistency",
  "Long Delay Recognition Discriminability",
  "Long Delay Recognition Response Bias",
  "Trial 1 Correct",
  "Trial 2 Correct",
  "Trial 3 Correct",
  "Trial 4 Correct",
  "Trial 5 Correct",
  "Trials 1-5 Correct",
  "List B Correct",
  "Short-Delay Free Recall Correct",
  "Short-Delay Cued Recall Correct",
  "Long-Delay Free Recall Correct",
  "Long-Delay Cued Recall Correct",
  "Recognition Discriminability (d')",
  "Total Intrusions",
  "Total Repetitions",
  "CVLT-3 Forced-Choice Recognition Hits",
  "Trial 1 Correct",
  "Trial 2 Correct",
  "Trial 3 Correct",
  "Trial 4 Correct",
  "Trials 1-4 Correct",
  "Short Delay Free Recall Correct",
  "Short Delay Cued Recall Correct",
  "Long Delay Free Recall Correct",
  "Long Delay Cued Recall Correct",
  "Recognition Discriminability (d')",
  "Total Intrusions",
  "Total Repetitions",
  "CVLT-3 Forced-Choice Recognition Hits",
  "NAB Memory Index",
  "Shape Learning Immediate Recognition",
  "Shape Learning Delayed Recognition",
  "Shape Learning Percent Retention",
  "Story Learning Immediate Recall",
  "Story Learning Delayed Recall",
  "Story Learning Percent Retention",
  "Memory Index (MEM)",
  "List Learning List A Trial 1 Immediate Recall",
  "List Learning List A Trial 2 Immediate Recall",
  "List Learning List A Trial 3 Immediate Recall",
  "List Learning List A Immediate Recall",
  "List Learning List B Immediate Recall",
  "List Learning List A Short Delayed Recall",
  "List Learning List A Long Delayed Recall",
  "List Learning List A Percent Retention",
  "List Learning List A Long Delayed Forced-Choice Recognition",
  "List Learning List A Long Delayed Forced-Choice Recognition False Alarms",
  "List Learning List A Discriminability Index",
  "List Learning List A Recall vs. Recognition Index",
  "List Learning Semantic Clusters",
  "List Learning Perseverations",
  "List Learning Intrusions",
  "Shape Learning Trial 1 Immediate Recognition",
  "Shape Learning Trial 2 Immediate Recognition",
  "Shape Learning Trial 3 Immediate Recognition",
  "Shape Learning Immediate Recognition",
  "Shape Learning Delayed Recognition",
  "Shape Learning Percent Retention",
  "Shape Learning Delayed Forced-Choice Recognition",
  "Shape Learning Delayed Forced-Choice Recognition False Alarms",
  "Shape Learning Discriminability Index",
  "Story Learning Trial 1 Phrase Unit Immediate Recall",
  "Story Learning Trial 2 Phrase Unit Immediate Recall",
  "Story Learning Phrase Unit Immediate Recall",
  "Story Learning Thematic Unit Immediate Recall",
  "Story Learning Trial 1 Thematic Unit Immediate Recall",
  "Story Learning Trial 2 Thematic Unit Immediate Recall",
  "Story Learning Phrase Unit Delayed Recall",
  "Story Learning Thematic Unit Delayed Recall",
  "Story Learning Phrase Unit Percent Retention",
  "Figure Drawing Immediate Recall",
  "Figure Drawing Percent Retention",
  "List Memory Delay Effect",
  "List Memory Interference Effect",
  "List Memory Intrusions",
  "List Memory Learning Effect",
  "List Memory Repetitions",
  "List Memory Total and Delayed Recall",
  "List Memory Total Trials 1-5",
  "List Recall",
  "List Recognition",
  "Memory for Designs Content",
  "Memory for Designs Delayed Content",
  "Memory for Designs Delayed Spatial",
  "Memory for Designs Delayed",
  "Memory for Designs Spatial",
  "Memory for Designs",
  "Memory for Faces Delayed",
  "Memory for Faces",
  "Narrative Memory Free and Cued Recall",
  "Narrative Memory Free Recall",
  "Narrative Memory Recall",
  "Narrative Memory Recognition",
  "Designs I",
  "Designs II",
  "Story Memory",
  "Story Recall",
  "List Memory Delay Effect",
  "List Memory Interference Effect",
  "List Memory Intrusions",
  "List Memory Learning Effect",
  "List Memory Repetitions",
  "List Memory Total and Delayed Recall",
  "List Memory Total Trials 1-5",
  "List Recall",
  "List Recognition",
  "Word List Interference-Recall",
  "Word List Interference-Repetition",
  "Logical Memory I",
  "Logical Memory II",
  "Visual Reproduction I",
  "Visual Reproduction II",
  "ROCFT Delayed Recall"
)

# Filter the data using the filter_data function from the `NeurotypR` library
data_memory <- NeurotypR::filter_data(
  data = memory,
  domain = domains,
  scale = scales
)
```

```{r}
#| label: text-memory
#| cache: true
#| include: false

# Generate the text for the memory domain
NeurotypR::cat_neuropsych_results(
  data = data_memory,
  file = "_02-05_memory_text.qmd"
)
```

```{r}
#| label: qtbl-memory
#| dev: tikz
#| fig-process: pdf2png
#| include: false

# Set the default engine for tikz to "xetex"
options(tikzDefaultEngine = "xetex")

# more filtering for tables
data_memory_tbl <- data_memory

# table arguments
table_name <- paste0("table_", pheno)
vertical_padding <- 0
multiline <- TRUE

# footnotes
fn_scaled_score <- gt::md(
  "Scaled score: Mean = 10 [50th\u2030], SD ± 3 [16th\u2030, 84th\u2030]"
)

fn_standard_score <- gt::md(
  "Standard score: Mean = 100 [50th\u2030], SD ± 15 [16th\u2030, 84th\u2030]"
)

fn_t_score <- gt::md(
  "T score: Mean = 50 [50th\u2030], SD ± 10 [16th\u2030, 84th\u2030]"
)

fn_z_score <- gt::md(
  "z-score: Mean = 0 [50th\u2030], SD ± 1 [16th\u2030, 84th\u2030]"
)

source_note <- gt::md(
  "_T_ score: Mean = 50 [50th\u2030], SD ± 10 [16th\u2030, 84th\u2030]"
)

# Dynamic groupings based on actual data
# Get unique test names and score types that actually exist in the data
existing_test_names <- unique(data_memory_tbl$test_name)
existing_test_names <- existing_test_names[!is.na(existing_test_names)]

# Get unique score types from the data
existing_score_types <- unique(data_memory_tbl$score_type)
existing_score_types <- existing_score_types[!is.na(existing_score_types)]

# Dynamically create groupings based on score types and test names in the data
# Initialize empty grouping list
grp_memory <- list()

# For each score type found in the data, collect the test names
for (score_type in existing_score_types) {
  test_names_for_score_type <- data_memory_tbl |>
    dplyr::filter(score_type == !!score_type) |>
    dplyr::pull(test_name) |>
    unique() |>
    sort()
  
  test_names_for_score_type <- test_names_for_score_type[!is.na(test_names_for_score_type)]
  
  if (length(test_names_for_score_type) > 0) {
    grp_memory[[score_type]] <- test_names_for_score_type
  }
}

# Only create table if we have data
if (nrow(data_memory_tbl) > 0) {
  # make `gt` table
  NeurotypR::tbl_gt2(
    data = data_memory_tbl,
    pheno = pheno,
    table_name = table_name,
    # source_note = source_note,
    fn_scaled_score = if ("scaled_score" %in% names(grp_memory) && length(grp_memory[["scaled_score"]]) > 0) {
      fn_scaled_score
    } else {
      NULL
    },
    fn_standard_score = if ("standard_score" %in% names(grp_memory) && length(grp_memory[["standard_score"]]) > 0) {
      fn_standard_score
    } else {
      NULL
    },
    fn_t_score = if ("t_score" %in% names(grp_memory) && length(grp_memory[["t_score"]]) > 0) {
      fn_t_score
    } else {
      NULL
    },
    grp_scaled_score = if ("scaled_score" %in% names(grp_memory) && length(grp_memory[["scaled_score"]]) > 0) {
      grp_memory[["scaled_score"]]
    } else {
      NULL
    },
    grp_standard_score = if ("standard_score" %in% names(grp_memory) && length(grp_memory[["standard_score"]]) > 0) {
      grp_memory[["standard_score"]]
    } else {
      NULL
    },
    grp_t_score = if ("t_score" %in% names(grp_memory) && length(grp_memory[["t_score"]]) > 0) {
      grp_memory[["t_score"]]
    } else {
      NULL
    },
    dynamic_grp = grp_memory,
    vertical_padding = vertical_padding,
    multiline = multiline
  )
} else {
  # Create empty placeholder if no data
  message(paste("No", pheno, "data available for table creation"))
}
```

```{r}
#| label: fig-memory-subdomain
#| include: false
#| fig-cap: "Domain-specific cognitive functions are essential for successful cognitive functioning, enabling us to perform everyday tasks, handle academic challenges, solve problems, manage our emotions, and interact effectively with others and our environment."

# dotplot arguments
filename <- "fig_memory_subdomain.svg"
colors <- NULL
return_plot <- TRUE

# dotplot variables to plot (x, y)
x <- data_memory$z_mean_subdomain
y <- data_memory$subdomain

NeurotypR::dotplot2(
  data = data_memory,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)
```

```{r}
#| label: fig-memory-narrow
#| include: false
#| fig-cap: "Domain-specific cognitive functions are essential for successful cognitive functioning, enabling us to perform everyday tasks, handle academic challenges, solve problems, manage our emotions, and interact effectively with others and our environment."

# dotplot arguments
filename <- "fig_memory_narrow.svg"
colors <- NULL
return_plot <- TRUE

# dotplot variables to plot (x, y)
x <- data_memory$z_mean_narrow
y <- data_memory$narrow

NeurotypR::dotplot2(
  data = data_memory,
  x = x,
  y = y,
  colors = colors,
  return_plot = return_plot,
  filename = filename,
  na.rm = TRUE
)
```

```{=typst}
#let domain(title: none, file_qtbl, file_fig) = {
  let font = (font: "Roboto Slab", size: 0.7em)
  set text(..font)
  pad(top: 0.5em)[]
    grid(
      columns: (50%, 50%),
      gutter: 8pt,
        figure([#image(file_qtbl)],
          caption: figure.caption(position: top, [#title]),
          kind: "qtbl",
          supplement: [Table],
          ),
        figure([#image(file_fig, width: auto)],
          caption: figure.caption(position: bottom, [
            Domain-specific cognitive functions are essential for successful cognitive functioning, enabling us to perform everyday tasks, handle academic challenges, solve problems, manage our emotions, and interact effectively with others and our environment.
            ]),
          placement: none,
          kind: "image",
          supplement: [Figure],
          gap: 0.5em,
        ),
      )
  }
```
```{=typst}
#let title = "Memory"
#let file_qtbl = "table_memory.png"
#let file_fig = "fig_memory_subdomain.svg"
#domain(
  title: [#title Scores],
  file_qtbl,
  file_fig
  )
```
```{=typst}
#let title = "Memory"
#let file_qtbl = "table_memory.png"
#let file_fig = "fig_memory_narrow.svg"
#domain(
  title: [#title Scores],
  file_qtbl,
  file_fig
  )
```
